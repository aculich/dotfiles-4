;; -*- mode: emacs-lisp -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

;; Configuration Layers
;; --------------------

(defun dotspacemacs/layers ()
  "Configuration Layers declaration."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `!distribution'. For now available distributions are `spacemacs-core'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs
   ;; If non-nil layers with lazy install support are lazy installed.
   ;; (default t)
   dotspacemacs-enable-lazy-installation t
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (ie. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '("~/dotfiles/.spacemacs-config/config-layers/")
   ;; List of configuration layers to load. If it is the symbol `all' instead
   ;; of a list then all discovered layers will be installed.
   dotspacemacs-configuration-layers '(
                                       ansible
                                       (auto-completion
                                        :variables
                                        auto-completion-enable-snippets-in-popup t
                                        auto-completion-enable-help-tooltip nil)
                                       chrome
                                       clojure
                                       colors
                                       custom_org_config
                                       django
                                       (elfeed
                                        :variables rmh-elfeed-org-files (list "~/Dropbox/org/feeds.org"))
                                       emacs-lisp
                                       emoji
                                       erc
                                       finance
                                       games
                                       (git
                                        :variables
                                        git-gutter-use-fringe t)
                                       github
                                       gnus
                                       graphviz
                                       html
                                       ipython-notebook
                                       javascript
                                       latex
                                       lua
                                       markdown
                                       my-mu4e
                                       my_python
                                       org
                                       org-ipython
                                       org-page
                                       pandoc
                                       spacemacs-layouts
                                       pdf-tools
                                       php
                                       (python
                                        :variables
                                        python-enable-yapf-format-on-save nil
                                        python-auto-set-local-pyenv-version 'on-project-switch
                                        python-test-runner 'pytest)
                                       ranger
                                       research-config
                                       ruby
                                       rust
                                       search-engine
                                       semantic
                                       (shell
                                        :variables
                                        shell-default-shell 'term
                                        shell-default-term-shell "/bin/zsh")
                                       (spell-checking
                                        :variables spell-checking-enable-by-default nil)
                                       syntax-checking
                                       tmux
                                       vagrant
                                       (version-control
                                        :variables version-control-diff-tool 'diff-hl)
                                       yaml
                                       )
   ;; A list of packages and/or extensions that will not be install and loaded.
   dotspacemacs-excluded-packages '(material-theme
                                    evil-escape
                                    evil-terminal-cursor-changer
                                    ido
                                    sublime-themes)
   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages then consider to create a layer, you can also put the
   ;; configuration in `dotspacemacs/config'.
   dotspacemacs-additional-packages '(magit-annex
                                      monokai-theme
                                      flycheck-package)
   ;; If non-nil spacemacs will delete any orphan packages, i.e. packages that
   ;; are declared in a layer which is not a member of
   ;; the list `dotspacemacs-configuration-layers'
   dotspacemacs-delete-orphan-packages t))

;; Initialization Hooks
;; --------------------

(defun dotspacemacs/init ()
  "User initialization for Spacemacs. This function is called at the very
 startup."
    (setq-default
     use-package-verbose t
     dotspacemacs-editing-style 'vim
     dotspacemacs-emacs-leader-key "M-m"
    ;; Specify the startup banner. If the value is an integer then the
    ;; banner with the corresponding index is used, if the value is `random'
    ;; then the banner is chosen randomly among the available banners, if
    ;; the value is nil then no banner is displayed.
    dotspacemacs-startup-banner 'official
    ;; List of themes, the first of the list is loaded when spacemacs starts.
    ;; Press <SPC> T n to cycle to the next theme in the list (works great
    ;; with 2 themes variants, one dark and one light)
    dotspacemacs-themes '(material material-light)
    ;; The leader key
    dotspacemacs-leader-key "SPC"
    ;; Major mode leader key is a shortcut key which is the equivalent of
    ;; pressing `<leader> m`
    dotspacemacs-major-mode-leader-key ","
    ;; The command key used for Evil commands (ex-commands) and
    ;; Emacs commands (M-x).
    ;; By default the command key is `:' so ex-commands are executed like in Vim
    ;; with `:' and Emacs commands are executed with `<leader> :'.
    dotspacemacs-command-key ":"
    ;; If non nil the paste micro-state is enabled. When enabled pressing `p`
    ;; several times cycle between the kill ring content. (default nil)
    dotspacemacs-enable-paste-transient-state t
    ;; which-key delay in seconds. The which-key is the popup buffer listing
    ;; the commands bound to the current keystrokes.
    which-key-idle-delay 0.4
    ;; If non nil the frame is fullscreen when Emacs starts up (Emacs 24.4+ only).
    dotspacemacs-fullscreen-at-startup nil
    ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
    ;; Use to disable fullscreen animations in OSX."
    dotspacemacs-fullscreen-use-non-native nil
    ;; Name of the default layout (default "Default")
    dotspacemacs-default-layout-name "Home"
    ;; If non nil then the last auto saved layouts are resume automatically upon
    ;; start. (default nil)
    dotspacemacs-auto-resume-layouts nil
    ;; If non nil a progress bar is displayed when spacemacs is loading. This
    ;; may increase the boot time on some systems and emacs builds, set it to
    ;; nil to boost the loading time. (default t)
    dotspacemacs-loading-progress-bar t
    ;; If non nil the frame is maximized when Emacs starts up (Emacs 24.4+ only).
    ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
    dotspacemacs-maximized-at-startup nil
    ;; A value from the range (0..100), in increasing opacity, which describes the
    ;; transparency level of a frame when it's active or selected. Transparency can
    ;; be toggled through `toggle-transparency'.
    dotspacemacs-active-transparency 90
    ;; A value from the range (0..100), in increasing opacity, which describes the
    ;; transparency level of a frame when it's inactive or deselected. Transparency
    ;; can be toggled through `toggle-transparency'.
    dotspacemacs-inactive-transparency 90
    ;; If non nil unicode symbols are displayed in the mode line (e.g. for lighters)
    dotspacemacs-mode-line-unicode-symbols nil
    ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth scrolling
    ;; overrides the default behavior of Emacs which recenters the point when
    ;; it reaches the top or bottom of the screen
    dotspacemacs-smooth-scrolling nil
    ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
    dotspacemacs-smartparens-strict-mode nil
    ;; If non nil advises quit functions to keep server open when quitting.
    dotspacemacs-persistent-server nil
    ;; The default package repository used if no explicit repository has been
    ;; specified with an installed package.
    ;; Not used for now.
    dotspacemacs-default-package-repository nil
    ;; set preview in latex files bigger
    preview-scale-function 1.6
    ;; Delete whitespace while saving buffer. Possible values are `all',
    ;; `trailing', `changed' or `nil'. Default is `changed' (cleanup whitespace
    ;; on changed lines) (default 'changed)
    dotspacemacs-whitespace-cleanup nil
    ;; make push work in magit without nagging
    magit-push-always-verify nil)

    (if window-system (setq dotspacemacs-mode-line-unicode-symbols t))
    ;; set the default font
    (setq dotspacemacs-default-font '("Hack"
                                      :size 13
                                      :weight normal
                                      :width normal
                                      :powerline-scale 1.1))
    (when (string= system-name "cpa")
    ;; work virtual machine
    (setq dotspacemacs-default-font '("Hack"
                                    :size 13
                                    :weight normal
                                    :width normal
                                    :powerline-scale 1.3)

          browse-url-generic-program "google-chrome")
    )
    (when (string= system-name "cp-laptop")
    ;; home laptop with hdpi screen
    (setq dotspacemacs-default-font '("Hack"
                                      :size 24
                                      :weight normal
                                      :width normal
                                      :powerline-scale 1.3)
          browse-url-generic-program "chromium"))

  (add-to-list 'load-path "~/dotfiles/.spacemacs-config" t)
  (add-to-list 'load-path "~/dotfiles/.spacemacs-config/org-reveal" t)
  (add-to-list 'load-path "~/dotfiles/.spacemacs-config/material-theme" t)

  )

(defun dotspacemacs/user-config ()
  "This is were you can ultimately override default Spacemacs configuration.
This function is called at the very end of Spacemacs initialization."
  (use-package helm
    :defer 5
    :commands (helm-execute-persistent-action
               helm-select-action
               helm-grep-mode-jump-other-window
               helm-grep-mode-jump-other-window-forward
               helm-grep-mode-jump-other-window-backward)
    :config
    (progn
        (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebihnd tab to do persistent action
        (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
        (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
        (define-key helm-map (kbd "C-S-j")  'helm-scroll-other-window)
        (define-key helm-map (kbd "C-S-k")  'helm-scroll-other-window-down)
        (define-key helm-grep-mode-map (kbd "<return>")  'helm-grep-mode-jump-other-window)
        (define-key helm-grep-mode-map (kbd "n")  'helm-grep-mode-jump-other-window-forward)
        (define-key helm-grep-mode-map (kbd "p")  'helm-grep-mode-jump-other-window-backward)
        (setq helm-split-window-in-side-p t)
      )
    )

    (defun set-exec-path-from-shell-PATH ()
      (let ((path-from-shell (replace-regexp-in-string
                              "[ \t\n]*$"
                              ""
                              (shell-command-to-string "$SHELL -c 'echo $PATH'"))))
        (setenv "PATH" path-from-shell)
        (setq eshell-path-env path-from-shell) ; for eshell users
        (setq exec-path (split-string path-from-shell path-separator))))

    (when window-system (set-exec-path-from-shell-PATH))

    ;; set terminal command
    (defun start-term () (interactive) (term "/bin/zsh"))
    (spacemacs/set-leader-keys "at" 'start-term)
    (add-hook 'prog-mode-hook 'turn-on-fci-mode)

    (setq flycheck-check-syntax-automatically '(save mode-enabled idle-change))
    (setq flycheck-idle-change-delay 5)
    (require 'org-pelican)
    ; Set name and email:
    (when (string= system-name "cpa")
      ;; work machine
      (setq user-full-name "Christoph Paulik"
            user-mail-address "christoph.paulik@geo.tuwien.ac.at")
      (setenv "NO_PROXY" "dvlp1.ipf.tuwien.ac.at,localhost,127.0.0.1")
      (setenv "no_proxy" "dvlp1.ipf.tuwien.ac.at,localhost,127.0.0.1")
      )
    (when (string= system-name "cp-laptop")
      ;; home laptop
      (setq user-full-name "Christoph Paulik"
            user-mail-address "cpaulik@gmail.com")
      )

    (use-package erc
      :defer t
      :commands connect-erc
      :init (spacemacs/set-leader-keys "oe" 'connect-erc)
      :config
      (progn
        (setq erc-autojoin-channels-alist
              '(("0.0" "#syl20bnr/spacemacs")))
        (defun connect-erc ()
          (interactive)
          (erc-tls :server "irc.gitter.im" :nick "cpaulik" :password nil)
        )
      ))

    (global-set-key (kbd "<C-mouse-4>") 'zoom-frm-in)
    (global-set-key (kbd "<C-mouse-5>") 'zoom-frm-out)
    (global-set-key (kbd "C-+") 'zoom-frm-in)
    (global-set-key (kbd "C--") 'zoom-frm-out)
    (setq dired-listing-switches "-alhk")
    (setq dired-listings-switches "-alhk")
    (setq delete-by-moving-to-trash nil)
    (setq wdired-allow-to-change-permissions t)
    (setq compilation-finish-function nil)
    ;; Make evil-mode up/down operate in screen lines instead of logical lines
    (define-key evil-normal-state-map "j" 'evil-next-visual-line)
    (define-key evil-normal-state-map "k" 'evil-previous-visual-line)
    ;; Also in visual mode
    (define-key evil-visual-state-map "j" 'evil-next-visual-line)
    (define-key evil-visual-state-map "k" 'evil-previous-visual-line)
    (setq doc-view-resolution 300)
    (setq vc-follow-symlinks t)
    ;; set default browser
    (setq browse-url-browser-function 'browse-url-generic)
    ;; set javascript company backends
    (setq company-backends-js2-mode '((company-tern :with company-dabbrev-code :with company-yasnippet)))
    ;; set python company backends
    (setq company-backends-python-mode '((company-anaconda :with company-dabbrev-code :with company-yasnippet)))
    (setq company-transformers '(spacemacs//company-transformer-cancel
                                 company-sort-by-backend-importance)))


;; Custom variables
;; ----------c------

;; Do not write anything in this section. This is where Emacs will
;; auto-generate custom variable definitions.


(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
)
